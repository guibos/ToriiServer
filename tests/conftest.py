import osimport shutilfrom urllib.parse import urljoin, urlencodeimport pytestfrom alembic.command import upgradefrom alembic.config import Configfrom src.infractuture.configuration.configuration_repository import Configurationfrom src.facade.database.facade import DatabaseFacadefrom src.common.environment import Environmentfrom src.facade.database.value_object import DatabaseURLValueObjectfrom src.main import make_appfrom src.value_object import AppConfigValueObjectSQLITE_DB_FILENAME_MASTER = "master_sqlite.db"SQLITE_DB_FILENAME_COPY = "sqlite.db"SQLITE_DB_DIRECTORY_MASTER = "master_sqlite"@pytest.fixture(scope="session")def prepare_master_sqlite_db(tmpdir_factory):    directory = tmpdir_factory.mktemp(SQLITE_DB_DIRECTORY_MASTER)    path = directory.join(SQLITE_DB_FILENAME_MASTER)    migrations_dir = os.getcwd()    config_file = os.path.join(migrations_dir, "alembic.ini")    config = Config(file_=config_file)    config.set_main_option('database_url.drivername', 'sqlite')    config.set_main_option('database_url.database', path.strpath)    upgrade(config, "head")    return path@pytest.fixturedef app(tmpdir, prepare_master_sqlite_db):    path = tmpdir.join(SQLITE_DB_FILENAME_COPY)    shutil.copy(prepare_master_sqlite_db, tmpdir.join(SQLITE_DB_FILENAME_COPY))    app_config = AppConfigValueObject(**Configuration(environment=Environment.TEST).get_section(section='tornado'))    database_url = DatabaseURLValueObject(drivername='sqlite', database=path)    database_facade = DatabaseFacade(database_url_config=database_url)    return make_app(config=app_config, database_facade=database_facade)@pytest.fixtureasync def auth_cookie(http_client, base_url):    url = urljoin(base_url, 'account/auth/login')    post_args = {'username': 'admin', 'password': 'admin'}    response = await http_client.fetch(url, method='POST', body=urlencode(post_args))    return response.headers['Set-Cookie']